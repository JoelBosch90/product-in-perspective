################################################################################
#
# Product in Perspective
#   This is the Docker Compose file that spawns all different services that are
#   involved with this app. The app was built specifically to have separate
#   microservices to make scaling relatively easy if traffic picks up.
#
#   It currently features the following services:
#     proxy       - The reverse proxy that will expose the services.
#     client      - The service that serves all client-side files.
#     api         - The REST API service that communicates directly with the
#                   clients.
#     database    - The service that the API uses for basic persistent storage.
#     storage     - The service that the API uses to store 3D models. We don't
#                   serve these models statically for easier scaling later. This
#                   storage should also be publicly accessible by the client for
#                   easier hosting.
#
################################################################################

# Use the latest version of Docker Compose.
version: "3"

# Not all of our services need to be able to talk to each other. It is best to
# keep them separated where we can.
networks:

  # We want to configure one network for all of the services that need to
  # communicate with the reverse proxy. The reverse proxy then decides how those
  # services can be accessed, but this is the network for all services that get
  # exposed publicly.
  proxied:

  # Then there are those services that don't need to be publicly accessible and
  # only communicate with other services. They go into the protected network.
  protected:

# We want to spawn several separate services from Docker images and manage all
# of them from this file.
services:

  ##############################################################################
  #
  # Proxy
  #   We use Nginx as a reverse proxy to direct requests to the ports of the
  #   correct services. This way we can hide the application's inner network.
  #
  ##############################################################################
  proxy:
    container_name: proxy

    # We can use the latest version of Nginx.
    image: nginx:latest

    # We can give Nginx access to the common web ports.
    ports:
      - 80:80
      - 443:443

    # We can use volumes to copy our reverse proxy configuration into Nginx.
    volumes:
      - ./Proxy/nginx.conf:/etc/nginx/nginx.conf
      - ./Proxy/error.log:/etc/nginx/error_log.log

    # The proxy needs access to the client, the API and the storage.
    depends_on:
      - client
      - api
      - storage

    # We need access to all the services that should be exposed (partly)
    # publicly.
    networks:
      - proxied

  ##############################################################################
  #
  # Client
  #   This is the service that serves all client-side files. It is written in a
  #   custom vanilla Javascript framework hosted with Node Express.
  #
  ##############################################################################
  client:
    container_name: client

    # We always want to restart when things go wrong.
    restart: always

    # We want to build from the Dockerfile in the Client directory.
    build:
      context: ./Client/
      dockerfile: development.dockerfile

    # The client will need to know where to host.
    environment:
      - HOST=client
      - PORT=8000

    # We can expose the client service in the container network.
    expose:
      - "8000"

    # We want to bind the changes inside the container to a local folder so that
    # we can update the code in real time.
    volumes:
      - ./Client:/client

    # We need the reverse proxy to expose the client publicly, so we need to
    # give it access to the client service.
    networks:
      - proxied

  ##############################################################################
  #
  # API
  #   This a Node REST API that that connects to the Database and Storage
  #   containers. This API also includes the configurations for both of those
  #   services, so they are not independent, but because they're hosted as
  #   separate containers should help them scale independently nonetheless.
  #
  ##############################################################################
  api:
    container_name: api

    # We always want to restart when things go wrong.
    restart: always

    # We want to build from the Dockerfile in the Api directory.
    build:
      context: ./Api/
      dockerfile: development.dockerfile

    # The api will need to know where to host.
    environment:
      - HOST=api
      - PORT=3000
      - STORAGE_HOST=storage
      - STORAGE_PORT=9000
      - DATABASE_HOST=database
      - DATABASE_PORT=27017

    # We can expose the API service in the container network.
    expose:
      - "3000"

    # We want to bind the changes inside the container to a local folder so that
    # we can update the code in real time.
    volumes:
      - ./Api:/api

    # We can get the environment variables from our environment variables file.
    env_file:
      - .env

    # The API will try to connect to the database and the storage services, so
    # we need to make sure that they are running before we initialize the API.
    depends_on:
      - database
      - storage

    # We need the reverse proxy to expose the api publicly, so we need to
    # give it access to the api service.
    networks:
      - proxied
      - protected

  ##############################################################################
  #
  # Database
  #   This is a NoSQL MongoDB database that we can use for scalable persistent
  #   data. MongoDB will store any document, but we can configure specific
  #   models and schemas in the API.
  #
  ##############################################################################
  database:
    container_name: database

    # We can pull the latest MongoDB version.
    image: mongo:4.4

    # We can expose the default MongoDB port database service in the proxy
    # network.
    expose:
      - "27017"

    # We need to designate a volume on physical disk to persist data between
    # restarts.
    volumes:
      - /data/database:/data/db

    # Only the api needs access to the database, so it does not need to be
    # publicly available. We can add it to the protected network.
    networks:
      - protected

  ##############################################################################
  #
  # Storage
  #   This is a Minio object storage that we can use as a scalable solution for
  #   hosting the 3D models. We can configure buckets from the API.
  #
  ##############################################################################
  storage:
    container_name: storage

    # We can pull the Minio version of a Minio server, and we want to designate
    # a data directory to persist data between restarts.
    image: minio/minio
    command: server /data

    # We can expose the default Minio port for the storage service in the proxy
    # network.
    expose:
      - "9000"

    # We need to designate a volume on physical disk to persist data between
    # restarts.
    volumes:
      - /data/storage:/data

    # We need the reverse proxy to expose the models bucket publicly, so we need
    # to give it access to the storage service.
    networks:
      - proxied
