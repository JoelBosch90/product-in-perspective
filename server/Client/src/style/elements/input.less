/**
 *  Input
 *    This file installs some basic styling on all inputs in the general
 *    application.
 */

// Apply styles to all input elements.
input,
select,
textarea {

  // Install the basic header font.
  font-family: var(--text-font);

  // Browsers may install different font-sizes but we want to keep the local
  // font-size.
  font-size: 1em;

  // Use the default text colour.
  color: var(--color);

  // Use the contrast background colour to clearly contrast against the usual
  // background.
  background-color: var(--alternate-background);

  // Lines of text with ample space in between are easier to read.
  line-height: var(--line-height);

  // Make sure that the input field is slightly larger than the text inside.
  padding: .25em .75em;

  // Use a thin border to clearly frame the input field.
  border: 1px solid var(--border-color);

  // Use slightly rounded corners to make the input fields look friendlier.
  border-radius: .25em;

  // Allow the input to transition back from focus and hover transitions.
  transition: border-color var(--animation-quick);

  // Tells the browser to include borders and paddings in the width of the input
  // element.
  box-sizing: border-box;

  // When using a standalone input field, it can be useful to use it as a block
  // element.
  &.block {

    // Make this input behave like a block element.
    display: block;

    // Give the input element some extra vertical margins.
    margin-top: .5em;
    margin-bottom: .5em;
  }

  // Show hover effects only when the input has not been disabled.
  &:not(:disabled):hover {

    // Show a subtle on hover effect. We want to make elements light up to make
    // them stand out in our generally dark interface.
    filter: brightness(125%);

    // Use a transition effect to give the hover effect a quick and smooth
    // animation.
    transition: brightness var(--animation-quick);
  }

  // Show the user when this input has been selected.
  &:focus {

    // Use the active color on the border-color to show the user that this
    // element is active.
    border-color: var(--active-color);

    // Use a transition effect to give the focus effect a quick and smooth
    // animation.
    transition: border-color var(--animation-quick);

    // We are using our own clear way to show focus so we don't need the browser
    // default.
    outline: none;
  }

  // Show the user when this input has been disabled.
  &:disabled {

    // Make the input stand out much less with a lower opacity. Use the filter
    // to set the opacity so that we are unhindered by any regular opacity the
    // element might have.
    filter: opacity(30%);

    // By default, browsers will add a background-color to a disabled input
    // field. Because we're using opacity to show this state instead, we don't
    // want the background-color.
    background-color: transparent;

    // Show the user this element is not currently interactive with a suitable
    // cursor.
    cursor: not-allowed;

    // When animating the disabled state, we want to use these animations.
    transition: filter var(--animation-quick);
  }
}

// Target only select elements.
select {

  // Line height works differently for select elements. That is why we
  // calculate the height separate for those elements based off of
  // line-height, plus two 1px borders and two .25em paddings. That should
  // make the select elements exactly as high as other inputs.
  height: calc(var(--line-height) + .5em + 2px);
}

// Target the input-field.
.input-field {

  // Use as much horizontal space as possible by default.
  width: 100%;

  // We are going to use absolute positioning to move the label around. We
  // want to move that label relative to this container.
  position: relative;

  // Target all supported input and textarea elements.
  input[type="text"],
  input[type="password"],
  input[type="email"],
  input[type="number"],
  textarea {

    // Use as much horizontal space as possible by default.
    width: 100%;

    // To line up our input and label perfectly, we need to make ensure that
    // our assumptions about sizes of the paddings and the borders are
    // correct.
    padding: 0.25em 0.75em;
    border-width: 1px;

    // We need to change the appearance of the placeholder of the input.
    &::placeholder {

      // We are using the label to immitate the placeholder, so we no longer
      // need to display it.
      color: transparent;
    }

    // Target only the label that goes with this input element. In the default
    // position, it will immitate the input's placeholder.
    & + label {

      // We want to position the label using absolute positioning relative to
      // the container of the input field.
      position: absolute;

      // Position it all the way on the top left of the parent element.
      left: 0;
      top: 0;

      // Use the contrast text colour.
      color: var(--alternate-color);

      // As we're immitating the placeholder element, we don't want this label
      // to stand out too much.
      opacity: 0.55;

      // As we're immitating the placeholder element, we don't want users to
      // be able to select this text.
      user-select: none;

      // As we're immitating the placeholder element, we want to mimic the
      // cursor over the input element.
      cursor: text;

      // The input element has a border that we need to immitate to overlay
      // the label perfectly. However, we do not need to show it.
      border-color: transparent;
      border-width: 1px;

      // We want to match the paddings of the input element exactly. However,
      // this would give the label too big a padding for our animation effect.
      // To remedy this, we move some of the padding into a margin for the
      // label.
      padding: 0.15em 0.45em;
      margin: 0.1em 0.3em;

      // When imitating the placeholder, we do not need a background-color.
      background-color: transparent;

      // When this label is moved into the label position, it will receive a
      // background-color. When this background becomes visible it will look
      // friendlier with rounded edges.
      border-radius: 0.25em;

      // When animating the label, we are using a transform. This transform
      // needs an origin.
      transform-origin: 0 0;

      // When animating the label, we want to use these animations.
      transition: color var(--animation-quick),
        transform var(--animation-quick),
        background-color var(--animation-quick),
        line-height var(--animation-quick),
        opacity var(--animation-quick);
    }

    // Target the label when the input element is being used.
    &:focus + label,
    &:not(:placeholder-shown) + label {

      // We want to transform our label from immitating an input placeholder
      // to being an actual label that sits on top of the input border.
      // To do this, we need our label to change position and scale down a
      // little bit.
      transform: translate(0, -60%) scale(0.8);

      // We want the label to sit on top of the border, but we don't want the
      // border to run through it, so the label needs a background colour.
      background-color: var(--alternate-background);

      // A label should be fully visible.
      opacity: 1;

      // We don't need too much background for this label.
      line-height: 1em;

      // When animating the label, we want to use these animations.
      transition: transform var(--animation-quick),
        line-height var(--animation-quick),
        background-color var(--animation-quick);

      // Target the text in the label.
      span {

        // A label should be fully visible.
        opacity: 1;

        // We are placing the label on top of the input border. In order for the
        // the label to blend in with the border, it should have the same
        // colour.
        color: var(--border-color);

        // When animating the label, we want to use these animations.
        transition: color var(--animation-quick), opacity var(--animation-quick);
      }
    }

    // Target the label when the input is in focus.
    &:focus + label span {

      // Match the focused input border-color.
      color: var(--active-color);
    }

    // Target the label when the input is hovered on.
    &:not(:disabled):hover + label {

      // Use similar on hover effects to the normal input elements.
      filter: brightness(125%);
      transition: brightness var(--animation-quick);
    }

    // Target the label when the input has been disabled.
    &:disabled + label span {

      // Match the cursor on the disabled input.
      cursor: not-allowed;

      // We want to visually match the opacity of the disabled input. For this
      // label to visually match the thin border's opacity, however, it needs
      // a much lower opacity than the input element itself.
      opacity: 0.25;

      // When animating the label, we want to use these animations.
      transition: opacity var(--animation-quick);
    }
  }

  // Target textarea elements specifically.
  textarea {

    // We want to give users some freedom to size the box themselves, but only
    // vertically.
    resize: vertical;
  }
}